{"version":3,"sources":["Styles.js","components/Navbar.js","components/Sidebar.js","App.js","serviceWorker.js","index.js"],"names":["styles","featureType","stylers","color","elementType","weight","lightness","hue","visibility","Navbar","toggleSide","document","querySelector","classList","toggle","react_default","a","createElement","aria-label","tabIndex","className","onClick","this","Component","Sidebar","props","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","_this2","type","placeholder","onChange","event","handleSearch","target","value","search","venues","length","map","cafe","key","venue","id","role","handleClick","name","API_KEY","concat","process","MY_ID","MY_SECRET","App","fetchVenues","param","query","secTwo","near","lat","lng","radius","locale","limit","v","url","section","fetch","then","response","json","data","setState","groups","items","searchVenues","renderMap","catch","err","console","log","script","window","src","async","defer","body","appendChild","runScript","initMap","_this$state","markers","google","maps","Map","getElementById","center","zoom","mapTypeControl","streetViewControl","streetViewControlOptions","position","ControlPosition","LEFT_TOP","infowindow","InfoWindow","defaultIcon","makeMarkerIcon","item","location","title","address","postal","postalCode","marker","Marker","id_marker","animation","Animation","DROP","icon","push","infoContent","addListener","setContent","open","setMarker","markerColor","MarkerImage","Size","Point","filter","searchVenue","RegExp","exec","clickedCafe","selectCafe","trigger","setIcon","setTimeout","components_Navbar","components_Sidebar","Boolean","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b8b88db3.chunk.js","sourcesContent":["const styles = [\n         {\n            featureType: 'water',\n            stylers: [\n              { color: '#4dffff' }\n            ]\n          },\n          {\n            featureType: 'administrative',\n            elementType: 'labels.text.stroke',\n            stylers: [\n              { color: '#ffffff' },\n              { weight: 6 }\n            ]\n          },\n          {\n            featureType: 'administrative',\n            elementType: 'labels.text.fill',\n            stylers: [\n              { color: '#231a1c' } //name of the city\n            ]\n          },\n          {\n            featureType: 'road.highway',\n            elementType: 'geometry.stroke',\n            stylers: [\n              { color: '#3a3735' }, //changed edges of roads along\n              { lightness: -40 }\n            ]\n          },\n          {\n            featureType: 'transit.station',\n            stylers: [\n              { weight: 9 },\n              { hue: '#669999' }\n            ]\n          },\n          {\n            featureType: 'road.highway',\n            elementType: 'labels.icon',\n            stylers: [\n              { visibility: 'off' }\n            ]\n          },\n          {\n            featureType: 'water',\n            elementType: 'labels.text.stroke',\n            stylers: [\n              { lightness: 100 }\n            ]\n          },\n          {\n            featureType: 'water',\n            elementType: 'labels.text.fill',\n            stylers: [\n              { lightness: -100 }\n            ]\n          },\n          {\n            featureType: 'poi',\n            elementType: 'geometry',\n            stylers: [\n              { visibility: 'on' },\n              { color: '#425466' } // parks\n            ]\n          },\n          {\n            featureType: 'road.highway',\n            elementType: 'geometry.fill',\n            stylers: [\n              { color: '#565147' }, // roads\n              { lightness: 25 }\n            ]\n          }];\n\nexport default styles;\n","import React, { Component } from 'react';\n// import React from 'react';\n\n// function Navbar(props) {\nclass Navbar extends Component {\n\n  toggleSide = () => {\n    const sidebar = document.querySelector('aside');\n    sidebar.classList.toggle('toggle-off');\n  }\n\n  render() {\n    return (\n        <nav aria-label=\"Cafés in Historic Center of Vienna\">\n          <span\n            tabIndex=\"0\"\n            aria-label=\"Toggle Search Input and list of locations\"\n            className=\"hamburger fas fa-bars\"\n            onClick={this.toggleSide}>\n          </span>\n          <h1>Best Cafés in Historic Vienna</h1>\n        </nav>\n    )\n  }\n}\n\nexport default Navbar;\n","import React, { Component } from 'react';\n\nclass Sidebar extends Component {\n  constructor(props) {\n    super(props);\n      this.state = {\n      }\n  }\n\n  render() {\n    return (\n      <aside>\n        <div className=\"search\">\n          <input\n            type='text'\n            placeholder='Search café...'\n            onChange={(event) => this.props.handleSearch(event.target.value) }\n            value={this.props.search}\n            aria-label=\"Filter Cafés\"\n            tabIndex='0'\n          />\n        </div>\n\n      {this.props.venues.length !== 0 && (\n        <ul className=\"cafe-list\">\n          { this.props.venues.map((cafe) => (\n            // onClick event listener takes cafe's id\n            <li\n              key={cafe.venue.id}\n              role=\"Menuitem\"\n              onClick={() => this.props.handleClick(cafe.venue.id)}\n              tabIndex='0'\n            >\n              {cafe.venue.name}\n            </li>\n            ))}\n        </ul>\n        )\n      }\n      {this.props.venues.length === 0 && this.props.search !== '' && (\n        <p className=\"alert\">This café isn't in our DB</p>\n        )\n       }\n\n      </aside>\n    )\n  }\n}\n\nexport default Sidebar;\n\n// console.log(searchVenue)\n// {reasons: {…}, venue: {…}, referralId: \"e-1-4c0635d4191f20a15b20e414-49\"}\n// reasons: {count: 0, items: Array(1)}\n// referralId: \"e-1-4c0635d4191f20a15b20e414-49\"\n// venue:\n// categories: [{…}]\n// id: \"4c0635d4191f20a15b20e414\"\n// location: {address: \"Dr. Karl Lueger Platz 3\", lat: 48.20754928109485, lng: 16.379431899181323, labeledLatLngs: Array(1), distance: 422, …}\n// name: \"Coffeeshop Company\"\n// photos: {count: 0, groups: Array(0)}\n// __proto__: Object\n// __proto__: Object\n","import React, { Component } from 'react';\nimport './App.css';\n// import * as myLocations from './locations.json';\nimport styles from './Styles';\nimport Navbar from './components/Navbar';\nimport Sidebar from './components/Sidebar';\nimport escapeRegExp from 'escape-string-regexp';\n// console.log(process.env.REACT_APP_xxx);\n\n const API_KEY =`${process.env.REACT_APP_API_KEY}`\n const MY_ID =`${process.env.REACT_APP_ID}`\n const MY_SECRET =`${process.env.REACT_APP_SECRET}`\n\n// const API_KEY = keys.api;\n\n// You're adding a <script> tag to your document to load the Google Maps API, but you aren't waiting for it to actually load before running your initMap method. Since it hasn't loaded yet, the google variable doesn't yet exist.\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // locations: myLocations,\n      venues: [],\n      markers: [],\n      searchVenues: [], // using for filtering when search\n      search: '',\n      selectCafe: null\n   }\n  }\n\n  // Calling renderMap\n  componentDidMount() {\n    // fetchVenues before others\n    this.fetchVenues()\n  }\n\n// https://api.foursquare.com/v2/venues/VENUE_ID\n// https://api.foursquare.com/v2/venues/explore?near=Vienna&q=coffee\n\n  // Get venues (caffe's in Vienna) from foursquere - requirement 2x id, place, # result, radius in meters\n  fetchVenues = () => {\n    const param = {\n      query: 'coffee',\n      // section: 'topPicks',\n      secTwo: 'nextVenue',\n      near: 'Vienna',\n      lat: 48.208176,\n      lng: 16.373819,\n      radius: 1000,\n      locale: 'en',\n      limit: 50,\n      v: \"20181412\"\n    }\n\n    let baseUrl = 'https://api.foursquare.com/v2/venues/explore?';\n    let url = baseUrl + `client_id=${MY_ID}&client_secret=${MY_SECRET}&v=${param.v}&query=${param.query}&section=${param.section}&section=${param.secTwo}&ll=${param.lat},${param.lng}&radius=${param.radius}&limit=${param.limit}&locale=${param.locale}&intent=browse`;\n\n    // Fetch data from set url with parameters\n    fetch(url)\n      .then(response =>\n        response.json())\n      .then(data => { // curly brackets for 2 commands\n        // console.log(data.response.groups[0].items)\n        // put callback fce from componentDidMount\n        this.setState({\n          venues: data.response.groups[0].items,\n          // added searchVenues -> using filter for search with RegExp\n          searchVenues: data.response.groups[0].items\n           },\n          this.renderMap())\n      })\n      .catch(err => console.log('Error occurs ' + err))\n  }\n\n  // Render map using API key from google, set up script for React\n  renderMap = () => {\n    // to work ${} use backticks\n    const url = `https://maps.googleapis.com/maps/api/js?key=${API_KEY}&v=3&callback=initMap`;\n    runScript(url)\n    window.initMap = this.initMap\n  }\n\n  // Initialize map - Google web quide\n    // function initMap() {}\n  initMap = () => {\n\n    const { venues, markers } = this.state;\n    const latLng = {lat: 48.208176, lng: 16.373819};\n\n    let map = new window.google.maps.Map(document.getElementById('map'), {\n      center: latLng,\n      zoom: 15,\n      styles: styles,\n      mapTypeControl: false, // hide satelite, terene option\n      streetViewControl: true,\n      streetViewControlOptions: {\n        position: window.google.maps.ControlPosition.LEFT_TOP\n          } // enable street view - icon is in top-left\n    });\n\n    // Create 1 infowindow - outside of looping/maping\n    let infowindow = new window.google.maps.InfoWindow();\n\n    // Choose icon of marker - when hover on sidebar\n    let defaultIcon = this.makeMarkerIcon('e6005c');\n    let activeIcon = this.makeMarkerIcon('d4c382');\n\n    // INSIDE OF VENUES WANT TO CREATE MARKER\n      // renderMap runs before we get our updated venues\n      // from foursquare.com - in state venues are []\n      // => render map after setState venues in fetchVenues\n    venues.map(item => {\n      var position = {lat: item.venue.location.lat, lng: item.venue.location.lng}\n      var title = item.venue.name;\n        // console.log(title);\n      var address = item.venue.location.address;\n      var postal = item.venue.location.postalCode;\n      var id = item.venue.id;\n\n      // Display and create marker - in 'loop'\n      let marker = new window.google.maps.Marker({\n        map: map,\n        position: position,\n        title: title,\n        address: address,\n        postal: postal,\n        id_marker: id,\n        animation: window.google.maps.Animation.DROP, //marker falls down\n        icon: defaultIcon\n      });\n\n      // Added marker to array\n      markers.push(marker);\n      // console.log(markers);\n      this.setState({\n        markers: markers\n      })\n\n      // display markers for handleClick for sidebar - one by one added\n      // console.log(markers);\n\n      // infowindow.setContent('<div>' +\n      // '<h3>' + marker.title + '</h3>' + '</div>')\n      let infoContent = `\n       <div class=\"card\">\n        <h2>${title}</h2>\n        <p><strong>Address:</strong> ${address}, <strong>ZIP:</strong> ${postal}</p>\n        <p><strong>Location:</strong> lat: ${position.lat}, lng: ${position.lng}</p>\n       </div>\n      `\n      // Click event listener on Marker\n      marker.addListener('click', function () {\n        // Change the content\n        infowindow.setContent(infoContent);\n        // open the infowindow on map with marker\n        infowindow.open(map, marker);\n        // marker.setIcon(activeIcon); nope\n      });\n        infowindow.addListener('clickout', function () {\n        // marker.setIcon(defaultIcon);\n        infowindow.setMarker(null);\n        // window.google.maps.event.clearInstanceListeners(marker);\n        });\n    }) // end of mapping\n  }\n\n  // Create shape and colors of markers - image\n  makeMarkerIcon = (markerColor) => {\n    let markerImage = new window.google.maps.MarkerImage(\n      'http://chart.googleapis.com/chart?chst=d_map_spin&chld=1.15|0|'+ markerColor +\n      '|40|_|%E2%80%A2',\n      new window.google.maps.Size(22, 30), //top part\n      new window.google.maps.Point(0, 0),\n      new window.google.maps.Point(10, 34),\n      new window.google.maps.Size(22,30));\n    return markerImage;\n  }\n\n  handleSearch = (event) => {\n    this.setState({\n      search: event,\n      venues: this.state.searchVenues.filter((searchVenue) =>\n            // console.log(searchVenue.venue.name)\n            new RegExp(event, \"i\").exec(searchVenue.venue.name))\n    });\n    // console.log(\"after filter: \" + this.state.venues);\n  }\n\n// 1. approach\n// - empty array for selectMarker [] in state\n// - compare id of marker with id of Cafe\n// - when click on cafe - change color of marker\n// - push that marker to the selectMarker [...] setState({})\n// => solve remove color of marker and change to default again\n\n// 2. approach\n// - empty selectCafe as null in state\n// - check clickedCafe (id) with cafe (list of in Sidebar)\n// - push to that to setState({}) - change its state...\n\n\n  handleClick = (clickedCafe) => {\n    // I FORGOT .map\n    // handleClick i wrote this.props???\n    this.setState({\n      selectCafe: clickedCafe\n    })\n\n    this.state.markers.map(marker => {\n      if(marker.id_marker === clickedCafe) {\n        // add class to marker or change him\n         window.google.maps.event.trigger(marker, 'click');\n        marker.setIcon(this.makeMarkerIcon('80ffff'))\n        // change color of marker icon to default\n        setTimeout(() =>\n          { marker.setIcon(this.makeMarkerIcon('e6005c'))}, 2500);\n      }\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <Navbar />\n        <div className=\"App\">\n          <Sidebar\n            venues={this.state.venues}\n            search={this.state.search}\n            searchVenues={this.state.venues}\n            handleSearch={this.handleSearch}\n            handleClick={this.handleClick}\n          />\n          <main>\n            <div id=\"map\" role=\"application\"></div>\n          </main>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n\nfunction runScript(url) {\n  // var reference = window.document.getElementsByTagName('script')[0];\n  let script = window.document.createElement('script');\n  script.src = url\n  script.async = true\n  script.defer = true\n  document.body.appendChild(script);\n  // document.head.appendChild(script)\n  // reference.insertBefore(script, reference.childNodes[0])\n}\n\n// structure of marker - 128 line\n// 0: _.gf\n// address: \"Salztorbrücke\"\n// anchorPoint: _.N {x: -0.5, y: -43, j: true}\n// animating: false\n// animation: null\n// changed: ƒ (a)\n// clickable: true\n// closure_uid_471573339: 12\n// gm_accessors_: {map: null, position: null, title: null, address: null, postal: null, …}\n// gm_bindings_: {map: {…}, position: {…}, title: {…}, address: {…}, postal: {…}, …}\n// id_marker: \"4bebe0036295c9b634278808\"\n// internalPosition: _.P {lat: ƒ, lng: ƒ}\n// map: Pg {gm_bindings_: {…}, __gm: rg, gm_accessors_: {…}, center: _.P, zoom: 15, …}\n// position: _.P {lat: ƒ, lng: ƒ}\n// postal: \"1020\"\n// title: \"Adria\"\n// visible: true\n// __e3_: {mouseover: {…}, click: {…}}\n// __gm: {set: _.Sd, qe: null, cc: {…}}\n// __proto__: ff\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}